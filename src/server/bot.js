const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const Imap = require('imap');
const { simpleParser } = require('mailparser');
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3002;
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP
const imap = new Imap({
    user: process.env.USERMAIL, // –í–∞—à–∞ –ø–æ—á—Ç–∞
    password: process.env.PASSWORDMAIL, // –í–∞—à –ø–∞—Ä–æ–ª—å –∏–ª–∏ App Password
    host: process.env.HOSTMAIL, // IMAP —Å–µ—Ä–≤–µ—Ä
    port: 993,
    tls: true
});

let processedEmails = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º

function openInbox(cb) {
    imap.openBox('INBOX', true, cb);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function checkForNewEmails() {
    imap.once('ready', () => {
        openInbox((err, box) => {
            if (err) throw err;

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            imap.on('mail', (numNewMail) => {
                fetchNewEmails();
            });
        });
    });

    imap.connect();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function fetchNewEmails() {
    imap.search(['UNSEEN'], (err, results) => {
        if (err) throw err;

        if (results.length) {
            const f = imap.fetch(results, { bodies: '' });
            f.on('message', (msg) => {
                msg.once('attributes', (attrs) => {
                    const emailId = attrs.uid; // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏—Å—å–º–∞

                    // –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if (processedEmails.has(emailId)) {
                        return;
                    }

                    msg.on('body', (stream, info) => {
                        simpleParser(stream, async (err, parsed) => {
                            if (err) throw err;

                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                            // –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏—Å—å–º–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                            processedEmails.add(emailId);
                        });
                    });
                });
            });

            f.once('end', async () => {
                console.log('–í—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
                await bot.sendMessage(process.env.ADMINTELEGRAMID, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É');
            });
        } else {
            console.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
        }
    });
}
checkForNewEmails()


app.use(cors());
app.use(express.json());

const waitingForGroupInfo = {};
const commands = [
    { command: "create", description: "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É" },
    { command: "join", description: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ" },
    { command: "leave", description: "–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã" },
    { command: "group", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã" },
    { command: "help", description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" },
];

bot.setMyCommands(commands);

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
const rateLimit = {};
const TIME_WINDOW = 1000; // –í—Ä–µ–º—è –æ–∫–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å–µ–∫—É–Ω–¥–∞)
const MAX_REQUESTS = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Ä–µ–º—è –æ–∫–Ω–∞
const userBlockList = {};
const BLOCK_TIME = 60000; // –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (userBlockList[chatId]) {
        const blockExpiration = userBlockList[chatId];
        const currentTime = Date.now();
        if (currentTime < blockExpiration) {
            bot.sendMessage(chatId, '–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
            return;
        } else {
            delete userBlockList[chatId]; // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        }
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!rateLimit[chatId]) {
        rateLimit[chatId] = { requests: 0, lastRequestTime: Date.now() };
    }

    const currentTime = Date.now();
    const timeSinceLastRequest = currentTime - rateLimit[chatId].lastRequestTime;

    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ
    if (timeSinceLastRequest > TIME_WINDOW) {
        rateLimit[chatId].requests = 1;
        rateLimit[chatId].lastRequestTime = currentTime;
    } else {
        rateLimit[chatId].requests++;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    if (rateLimit[chatId].requests > MAX_REQUESTS) {
        userBlockList[chatId] = Date.now() + BLOCK_TIME; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        bot.sendMessage(chatId, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
    }

    // –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (text === '/start') {
        try {
            await axios.post('http://localhost:3001/newUser ', {
                tg_id: chatId,
                first_name: msg.from.first_name,
                username: msg.from.username,
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            await bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **DeadlineMinder** ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏!`, {
                reply_markup: { keyboard: [['–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É üåüüë´'], ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ü§óüîó'], ['–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã ‚ùåüö∂‚Äç‚ôÇÔ∏è'], ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã üëÅÔ∏èüìë'],['–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üõ†Ô∏èüìû']], one_time_keyboard: true },
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    } else if (text === '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É üåüüë´' || text === '/create') {
        try{
            const myGroups = await axios.post('http://localhost:3001/myGroups', {
                id: chatId
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            const countGroup = myGroups.data.length;
            if (countGroup >= 8) {
                bot.sendMessage(chatId, '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø. –ú–∞–∫—Å–∏–º—É–º 8 –≥—Ä—É–ø–ø.');
            } else {
                bot.sendMessage(chatId, '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:');
                waitingForGroupInfo[chatId] = { step: 'name' };
            }
        } catch(error){
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –≥—Ä—É–ø–ø:', error);
        }
    } else if (waitingForGroupInfo[chatId]?.step === 'name') {
        waitingForGroupInfo[chatId].name = text.trim();
        if(waitingForGroupInfo[chatId].name.length > 12){
            bot.sendMessage(chatId, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–ª–∏–Ω—É 12 —Å–∏–º–≤–æ–ª–æ–º.');
            return;
        }
        await bot.sendMessage(chatId, `–ö–∞–∫–æ–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ?`, {
            reply_markup: { keyboard: [['–ü—É–±–ª–∏—á–Ω—ã–π'], ['–ü—Ä–∏–≤–∞—Ç–Ω—ã–π']], one_time_keyboard: true },
        });
        waitingForGroupInfo[chatId].step = 'type';
    } else if (waitingForGroupInfo[chatId]?.step === 'type') {
        const { name } = waitingForGroupInfo[chatId];
        let type = text.trim();
        if (type === '–ü—É–±–ª–∏—á–Ω—ã–π') {
            type = 'public';
        } else if (type === '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π') {
            type = 'private';
        }
        try {
            const newGroup = await axios.post('http://localhost:3001/createNewGroup', {
                name,
                type,
                admin: chatId,
            },{
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            await bot.sendMessage(chatId, `–ì—Ä—É–ø–ø–∞ "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: ${newGroup.data}\n\n–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.`,{
                reply_markup: { keyboard: [['–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É üåüüë´'], ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ü§óüîó'], ['–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã ‚ùåüö∂‚Äç‚ôÇÔ∏è'], ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã üëÅÔ∏èüìë'],['–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üõ†Ô∏èüìû']] },
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
        }
        delete waitingForGroupInfo[chatId];
    } else if (text === '/help' || text === '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üõ†Ô∏èüìû') {
        const responseMessage = `
        –ü—Ä–∏–≤–µ—Ç! üëã\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º! \n\nüìß –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: help@deadlineminder.ru\n\nüí¨ –ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram: @deadlineminder`;
        await bot.sendMessage(chatId, responseMessage);
    }
    else if (text === '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ü§óüîó' || text === '/join') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:');
        waitingForGroupInfo[chatId] = { step: 'joinGroup' };
    } else if (waitingForGroupInfo[chatId]?.step === 'joinGroup') {
        try{
            const myGroups = await axios.post('http://localhost:3001/myGroups', {
                id: chatId
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            const countGroup = myGroups.data.length;
            if (countGroup >= 8) {
                await bot.sendMessage(chatId, '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã.');
                return;
            } else {
                const groupId = text.trim();
                try {
                    await axios.post('http://localhost:3001/joinGroup', {
                        id_group: groupId,
                        tg_id: chatId
                    }, {
                        headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
                    });
                    await bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ —Å ID: ${groupId}`);
                } catch (error) {
                    await bot.sendMessage(chatId, error.response.data.error);
                }
                delete waitingForGroupInfo[chatId];
            }
        }catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –≥—Ä—É–ø–ø:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ.');
        }
    } else if (text === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã üëÅÔ∏èüìë' || text === '/group') {
        try {
            const response = await axios.post('http://localhost:3001/myGroups', {
                id: chatId,
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            if(response.data.length === 0){
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.');
                return;
            }
            response.data.forEach(async group => {
                await bot.sendMessage(chatId, `–ì—Ä—É–ø–ø–∞: ${group.name}\nID: ${group.id_group}`,{
                    reply_markup: { keyboard: [['–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É üåüüë´'], ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ü§óüîó'], ['–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã ‚ùåüö∂‚Äç‚ôÇÔ∏è'], ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã üëÅÔ∏èüìë'],['–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üõ†Ô∏èüìû']] },
                });
            });
        } catch (error) {
            console.error('Error fetching groups:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.');
        }
    } else if (text === '–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã ‚ùåüö∂‚Äç‚ôÇÔ∏è' || text === '/leave') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è:');
        waitingForGroupInfo[chatId] = { step: 'leaveGroup' };
    } else if (waitingForGroupInfo[chatId]?.step === 'leaveGroup') {
        const groupId = text.trim();
        try {
            const res = await axios.post('http://localhost:3001/leaveGroup', {
                id_group: groupId,
                member: chatId,
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });
            bot.sendMessage(chatId, res.data.message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –≥—Ä—É–ø–ø—ã.');
        }
        delete waitingForGroupInfo[chatId];
    }
});

bot.on('callback_query', async (call) => {
    const data = JSON.parse(call.data);
    if (data.action === 'approve' || data.action === 'reject') {
        try {
            const response = await axios.post('http://localhost:3001/actionJoinPrivateGroup', {
                action: data.action,
                tg_id: data.idMember,
                id_group: data.id_group
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });

            const { chatId, message } = response.data;
            await bot.sendMessage(chatId, message);
            await bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –≤–∞—à –æ—Ç–≤–µ—Ç.',{
                chat_id: call.message.chat.id,
                message_id: call.message.message_id,
            });
            console.log(call);
            
        } catch (error) {
            console.error('Error in actionJoinPrivateGroup:', error.message);
            await bot.sendMessage(call.from.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    }

    if (data.action === 'approveDeleteGroup') {
        try {
            const res = await axios.post('http://localhost:3001/deleteGroup', {
                id_group: data.id_group
            }, {
                headers: { 'Content-Type': 'application/json' ,'Origin': 'http://bot-req' },
            });

            if (res.data) {
                const { message } = res.data;
                bot.editMessageText(message,{
                    chat_id: call.message.chat.id,
                    message_id: call.message.message_id,
                });
            } else {
                console.log('No data received from deleteGroup');
            }
        } catch (error) {
            console.error('Error in deleteGroup:', error.message);
            await bot.sendMessage(call.from.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
        }
    }

    if (data.action === 'rejectDeleteGroup') {
        await bot.editMessageText('–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ—Å—Ç–∞–µ—Ç—Å—è',{
            chat_id: call.message.chat.id,
            message_id: call.message.message_id,
        });
    }
});

app.post('/joinUserPriveGroup', async (req, res) => {
    const { chatId, idMember, groupName, usernameMember, id_group } = req.body;
    await bot.sendMessage(chatId, `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameMember} —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –≥—Ä—É–ø–ø–µ "${groupName}"`, {
        reply_markup: {
            inline_keyboard: [[
                { text: '–î–æ–±–∞–≤–∏—Ç—å', callback_data: JSON.stringify({ action: 'approve', idMember: idMember, id_group: id_group }) },
                { text: '–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å', callback_data: JSON.stringify({ action: 'reject', idMember: idMember, id_group: id_group }) }
            ]]
        }
    });
});

app.post('/messageDeleteGroup', async (req, res) => {
    const { message, chatId, id_group } = req.body;
    await bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [[
                { text: '–£–¥–∞–ª–∏—Ç—å', callback_data: JSON.stringify({ action: 'approveDeleteGroup', id_group: id_group }) },
                { text: '–ù–µ –£–¥–∞–ª—è—Ç—å', callback_data: JSON.stringify({ action: 'rejectDeleteGroup' }) }
            ]]
        }
    });
});
app.post('/createDeadline', (req, res) => {
    const {members, nameGroup} = req.body;
    members.forEach(async (member) => {
        await bot.sendMessage(member, `–í –≥—Ä—É–ø–ø–µ "${nameGroup}" –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω`)
    })
})

app.post('/trackDeadline', (req, res) => {
    const {data} = req.body
    const sortData = new Set()
    data.forEach(d => {
        sortData.add(d)
    })
    console.log(Array.from(sortData));
    Array.from(sortData).forEach(async d =>{
        await bot.sendMessage(d.member, `–í –≥—Ä—É–ø–ø–µ "${d.group}" –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω`)
    })

})
app.post('/groupDelete', (req, res) => {
    const {members, groupName} = req.body;
    members.forEach(async (member) => {
        await bot.sendMessage(member, `–ì—Ä—É–ø–ø–∞ "${groupName}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`)
    })
})
app.post('/userDeleteGroup', async (req, res) => {
    const {tg_id, groupName} = req.body;
    await bot.sendMessage(tg_id, `–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å –≥—Ä—É–ø–ø—ã "${groupName}"`)
})
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
